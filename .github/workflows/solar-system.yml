name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      #- main
      - 'feature/*'
env:
    MONGO_URI: ${{ vars.MONGO_URL }}
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo:
            image: mongo:latest
            ports:
              - 27017:27017
            env:
              MONGO_INITDB_ROOT_USERNAME: ${{ vars.MONGO_USERNAME }}
              MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
              
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: Cache Npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-
    
        - name: Install Dependencies
          run: npm install
    
        - id: unit-test-step
          name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        container:
          image: node:18
        services:
          mongo:
            image: mongo:latest
            ports:
              - 27017:27017
            env:
              MONGO_INITDB_ROOT_USERNAME: ${{ vars.MONGO_USERNAME }}
              MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        # - name: Setup NodeJS Version
        #   uses: actions/setup-node@v3
        #   with:
        #      node-version: 18

        - name: Cache Npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-
    
        - name: Install Dependencies
          run: npm install

        - name: check Code Coverage
          run: npm run coverage
          continue-on-error: true
    
        - name: Archive Coverage Result
          uses: actions/upload-artifact@v4
          with:
            name: Coverage-Report
            path: coverage-results
            retention-days: 5

    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ vars.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: GHCR login
          uses: docker/login-action@v2
          with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}
  
        - name: Build Docker Image for testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKER_USERNAME }}/nodejs-demo:1.0

        - name: Test Built Docker Image
          run: |
            docker run -d \
              -e MONGO_URI=${{ vars.MONGO_URL }} \
              -e MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
              -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
              -p 3000:3000 \
              --name nodejs-demo-app \
              ${{ vars.DOCKER_USERNAME }}/nodejs-demo:1.0

        - name: Access App with Wget
          run: |
            wget -qO- http://localhost:3000 || echo "Failed to access the app"

        - name: Push image to Docker/GHCR
          uses: docker/build-push-action@v4
          with:
              context: .
              push: true
              tags: |
                ${{ vars.DOCKER_USERNAME }}/nodejs-demo:1.1
                ghcr.io/${{ github.repository_owner }}/nodejs-demo:1.0

    dev-deply:
        name: Dev-Deployment to K8s
        needs: [docker]
        runs-on: self-hosted
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: install kubectl
          uses: azure/setup-kubectl@v4
          with:
            version: 'v1.32.3'
        
        - name: Set Kubernetes Context
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBE_CONFIG }}

        - name: Replace Placeholders
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: _{_
            tokenSuffix: _}_
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKER_USERNAME }}/nodejs-demo:1.1

        - name: fetch cluster details
          run: |
            kubectl config view
            kubectl version -o yaml
            kubectl cluster-info
            kubectl get nodes
            cat kubernetes/development/*.yaml
